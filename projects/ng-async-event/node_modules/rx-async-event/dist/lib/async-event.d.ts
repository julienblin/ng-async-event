/** Possible states for an async event. */
export declare type AsyncEventState = 'init' | 'processing' | 'processed' | 'error';
/** Non-generic interface for AsyncEvent */
export interface IAsyncEvent {
    /** Returns true if this event represents the initial state. */
    isInit: boolean;
    /** Returns true if this event represents a processing state. */
    isProcessing: boolean;
    /** Returns true if this event represents a processed state. */
    isProcessed: boolean;
    /** Returns true if this event represents an error state. */
    isError: boolean;
    /** Gets the event argument, if any. */
    argument: any;
    /** Gets the event result, if any. */
    result: any;
    /** Returns true if the result is false or an empty array. */
    isResultEmpty: boolean;
    /** Gets the event error, if any. */
    error?: Error;
    /** Gets the event state. */
    state: AsyncEventState;
    /** More elegant version of state ===. */
    is(state: AsyncEventState): boolean;
}
/**
 * An AsyncEvent is a encapsulation of an event
 * that can be emitted along with state indication
 * and data.
 */
export declare class AsyncEvent<TArgument, TResult> implements IAsyncEvent {
    readonly state: AsyncEventState;
    readonly data: {
        argument?: TArgument;
        result?: TResult;
        error?: Error;
    };
    constructor(state: AsyncEventState, data: {
        argument?: TArgument;
        result?: TResult;
        error?: Error;
    });
    /** Returns true if this event represents the initial state. */
    readonly isInit: boolean;
    /** Returns true if this event represents a processing state. */
    readonly isProcessing: boolean;
    /** Returns true if this event represents a processed state. */
    readonly isProcessed: boolean;
    /** Returns true if this event represents an error state. */
    readonly isError: boolean;
    /** More elegant version of state ===. */
    is(state: AsyncEventState): boolean;
    /** Gets the event argument, if any. */
    readonly argument: TArgument | undefined;
    /** Gets the event result, if any. */
    readonly result: TResult | undefined;
    /** Returns true if the result is false or an empty array. */
    readonly isResultEmpty: boolean;
    /** Gets the event error, if any. */
    readonly error: Error | undefined;
}
/** Constant init event - should be the same for all AsyncEvents... */
export declare const InitAsyncEvent: AsyncEvent<{}, {}>;
