"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An AsyncEvent is a encapsulation of an event
 * that can be emitted along with state indication
 * and data.
 */
var AsyncEvent = /** @class */ (function () {
    function AsyncEvent(state, data) {
        this.state = state;
        this.data = data;
    }
    Object.defineProperty(AsyncEvent.prototype, "isInit", {
        /** Returns true if this event represents the initial state. */
        get: function () {
            return this.is('init');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncEvent.prototype, "isProcessing", {
        /** Returns true if this event represents a processing state. */
        get: function () {
            return this.is('processing');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncEvent.prototype, "isProcessed", {
        /** Returns true if this event represents a processed state. */
        get: function () {
            return this.is('processed');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncEvent.prototype, "isError", {
        /** Returns true if this event represents an error state. */
        get: function () {
            return this.is('error');
        },
        enumerable: true,
        configurable: true
    });
    /** More elegant version of state ===. */
    AsyncEvent.prototype.is = function (state) {
        return this.state === state;
    };
    Object.defineProperty(AsyncEvent.prototype, "argument", {
        /** Gets the event argument, if any. */
        get: function () {
            return this.data.argument;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncEvent.prototype, "result", {
        /** Gets the event result, if any. */
        get: function () {
            return this.data.result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncEvent.prototype, "isResultEmpty", {
        /** Returns true if the result is false or an empty array. */
        get: function () {
            if (!this.result) {
                return true;
            }
            if (Array.isArray(this.result) && this.result.length === 0) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AsyncEvent.prototype, "error", {
        /** Gets the event error, if any. */
        get: function () {
            return this.data.error;
        },
        enumerable: true,
        configurable: true
    });
    return AsyncEvent;
}());
exports.AsyncEvent = AsyncEvent;
/** Constant init event - should be the same for all AsyncEvents... */
exports.InitAsyncEvent = new AsyncEvent('init', {});
