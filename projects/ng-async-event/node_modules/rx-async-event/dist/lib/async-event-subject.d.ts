import { BehaviorSubject, Observable, Subscription } from 'rxjs';
import { AsyncEvent } from './async-event';
/**
 * An AsyncEventSubject is a BehaviorSubject with helper methods.
 * It is intended to be manipulated and own by services, and returned
 * to views as AsyncEventObservables.
 */
export declare class AsyncEventSubject<TArgument, TResult> extends BehaviorSubject<AsyncEvent<TArgument, TResult>> {
    /**
     * Creates an AsyncEventSubject by following a promise life cycle.
     */
    static execute<TArgument, TResult>(argument: TArgument, promise: (argument: TArgument) => Promise<TResult>): AsyncEventSubject<TArgument, TResult>;
    constructor();
    /** Emits an event with the init state. */
    init(): void;
    /** Emits an event with the processing state. */
    processing(argument?: TArgument, result?: TResult): void;
    /** Emits an event with the processed state. */
    processed(argument?: TArgument, result?: TResult): void;
    /**
     * Emits an event with the error state.
     * Do not confuse with error, which puts the Subject itself on error.
     */
    managedError(argument?: TArgument, result?: TResult, error?: Error): void;
    /**
     * Manages the execution life cycle of a Promise.
     * processing => processed | error;
     * @param carryOnResult - true to emit current result on processing and error
     */
    execute(argument: TArgument, promise: (argument: TArgument) => Promise<TResult>, carryOnResult?: boolean): void;
    /**
     * Manages the observance life cycle of an Observable.
     * processing => (processed | error)*;
     * @returns the subscription.
     * @param carryOnResult - true to emit current result on processing and error
     */
    observe(argument: TArgument, observable: Observable<TResult>, carryOnResult?: boolean): Subscription;
}
