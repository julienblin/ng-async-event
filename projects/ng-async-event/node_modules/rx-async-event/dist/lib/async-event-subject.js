"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var async_event_1 = require("./async-event");
/**
 * An AsyncEventSubject is a BehaviorSubject with helper methods.
 * It is intended to be manipulated and own by services, and returned
 * to views as AsyncEventObservables.
 */
var AsyncEventSubject = /** @class */ (function (_super) {
    __extends(AsyncEventSubject, _super);
    function AsyncEventSubject() {
        return _super.call(this, async_event_1.InitAsyncEvent) || this;
    }
    /**
     * Creates an AsyncEventSubject by following a promise life cycle.
     */
    AsyncEventSubject.execute = function (argument, promise) {
        var subject = new AsyncEventSubject();
        subject.execute(argument, promise);
        return subject;
    };
    /** Emits an event with the init state. */
    AsyncEventSubject.prototype.init = function () {
        _super.prototype.next.call(this, async_event_1.InitAsyncEvent);
    };
    /** Emits an event with the processing state. */
    AsyncEventSubject.prototype.processing = function (argument, result) {
        _super.prototype.next.call(this, new async_event_1.AsyncEvent('processing', { argument: argument, result: result }));
    };
    /** Emits an event with the processed state. */
    AsyncEventSubject.prototype.processed = function (argument, result) {
        _super.prototype.next.call(this, new async_event_1.AsyncEvent('processed', { argument: argument, result: result }));
    };
    /**
     * Emits an event with the error state.
     * Do not confuse with error, which puts the Subject itself on error.
     */
    AsyncEventSubject.prototype.managedError = function (argument, result, error) {
        _super.prototype.next.call(this, new async_event_1.AsyncEvent('error', { argument: argument, error: error, result: result }));
    };
    /**
     * Manages the execution life cycle of a Promise.
     * processing => processed | error;
     * @param carryOnResult - true to emit current result on processing and error
     */
    AsyncEventSubject.prototype.execute = function (argument, promise, carryOnResult) {
        var _this = this;
        if (carryOnResult === void 0) { carryOnResult = true; }
        var currentResult = carryOnResult ? this.value.result : undefined;
        this.processing(argument, currentResult);
        promise(argument)
            .then(function (result) { return _this.processed(argument, result); }, function (error) { return _this.managedError(argument, currentResult, error); });
    };
    /**
     * Manages the observance life cycle of an Observable.
     * processing => (processed | error)*;
     * @returns the subscription.
     * @param carryOnResult - true to emit current result on processing and error
     */
    AsyncEventSubject.prototype.observe = function (argument, observable, carryOnResult) {
        var _this = this;
        if (carryOnResult === void 0) { carryOnResult = true; }
        var currentResult = carryOnResult ? this.value.result : undefined;
        this.processing(argument, currentResult);
        return observable.subscribe(function (result) { return _this.processed(argument, result); }, function (error) { return _this.managedError(argument, currentResult, error); });
    };
    return AsyncEventSubject;
}(rxjs_1.BehaviorSubject));
exports.AsyncEventSubject = AsyncEventSubject;
